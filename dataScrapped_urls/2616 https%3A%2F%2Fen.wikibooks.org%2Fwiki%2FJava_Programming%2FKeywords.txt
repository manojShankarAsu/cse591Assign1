Code-Block-AW3<pre><span></span><span class="lineno"> 1 </span><span class="cm">/**</span>
<span class="lineno"> 2 </span><span class="cm"> * The singleton class that can be instantiated only once with lazy instantiation</span>
<span class="lineno"> 3 </span><span class="cm"> */</span>
<span class="lineno"> 4 </span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
<span class="lineno"> 5 </span>    <span class="cm">/** Static class instance */</span>
<span class="lineno"> 6 </span>    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
<span class="lineno"> 7 </span>
<span class="lineno"> 8 </span>    <span class="cm">/**</span>
<span class="lineno"> 9 </span><span class="cm">     * Standard private constructor</span>
<span class="lineno">10 </span><span class="cm">     */</span>
<span class="lineno">11 </span>    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">12 </span>        <span class="c1">// Some initialisation</span>
<span class="lineno">13 </span>    <span class="o">}</span>
<span class="lineno">14 </span>   
<span class="lineno">15 </span>    <span class="cm">/**</span>
<span class="lineno">16 </span><span class="cm">     * Getter of the singleton instance</span>
<span class="lineno">17 </span><span class="cm">     * @return The only instance</span>
<span class="lineno">18 </span><span class="cm">     */</span>
<span class="lineno">19 </span>    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">()</span> <span class="o">{</span>
<span class="lineno">20 </span>        <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">21 </span>            <span class="c1">// If the instance does not exist, go in time-consuming</span>
<span class="lineno">22 </span>            <span class="c1">// section:</span>
<span class="lineno">23 </span>            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">24 </span>                <span class="k">if</span> <span class="o">(</span><span class="n">instance</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
<span class="lineno">25 </span>                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
<span class="lineno">26 </span>                <span class="o">}</span>
<span class="lineno">27 </span>            <span class="o">}</span>
<span class="lineno">28 </span>        <span class="o">}</span>
<span class="lineno">29 </span>
<span class="lineno">30 </span>        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
<span class="lineno">31 </span>    <span class="o">}</span>
<span class="lineno">32 </span> <span class="o">}</span>
</pre>